Pre-requisites: 
.Net Core 3.0 SDK (dotnet --info and dotnet --version)
NodeJS for running Angular app and NPM for packagement management (Latest LTS version node --version and npm --version)
Visual Studio code for development of application (its free and its cross-platform)

NGX Bootstrap is being used in place of Jquery (try avoid jquery in an Angular app). 
Bootswatch is used to theme of the application

Error handling in Angular side must be generic via HttpInterceptors that handles various types of errors
such as 400, 500, Custom error headers etc

Server side do Global error handling and add error messages to response header (extension method)

Route Resolvers are used to get get initial data for the route so that you don't need to add safe navigation operator

@HostListener() decorator to setup to listen to any DOM event and then callback a handler method to run custom code

@ViewChild() decorartor can be used to access any template reference variable inside the component class.

The way pagination is built in this app, is very generic and reusable. Check it out for ICC

We are using Fluent API in EF to describle many to many relationships between Entities (Likers and Likees)

Differntial loading - es2015 and es5 versions during build, based on the browser the respective files will get downloaded
FallbackController - To load angular index.html within API. Even if you see all .es5 and .es2015 files are referenced in index.html
if you refresh the app page and see network tab you will see only .es2015 files loaded. This is differential loading

ng build --prod - By default uses AOT compilation and precompiles and so Angular compiler is not part of bundled files (reduces size a lot)
Which is pretty cool since its by default AOT compiled when doing ng build --prod
Make ICC app build via ng build

Program and Feature -> Turn Windows Features On and off - Performance Feature -> "Dynamic Content Compression" - Gzip all requests
Azure Web Apps automatically gzips all requests. Just try setting it in IIS setting with above setting for ICC

There are 2 sections that clearly explain how to deploy the application and database to Azure.

The Bonus section - Identity and Role Management refactors the application about using Asp.Net Core identity for Identity and 
Role management for this App